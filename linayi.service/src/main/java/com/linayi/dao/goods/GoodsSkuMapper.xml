<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linayi.dao.goods.GoodsSkuMapper">
    <resultMap id="BaseResultMap" type="com.linayi.entity.goods.GoodsSku">
        <result column="goods_sku_id" jdbcType="INTEGER" property="goodsSkuId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="full_name" jdbcType="VARCHAR" property="fullName"/>
        <result column="barcode" jdbcType="VARCHAR" property="barcode"/>
        <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
        <result column="brand_id" jdbcType="INTEGER" property="brandId"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="image" jdbcType="VARCHAR" property="image"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="model" jdbcType="VARCHAR" property="model"/>
        <result column="function" jdbcType="VARCHAR" property="function"/>
        <result column="produce_address" jdbcType="VARCHAR" property="produceAddress"/>
        <result column="produce_date" jdbcType="TIMESTAMP" property="produceDate"/>
        <result column="valid_date" jdbcType="TIMESTAMP" property="validDate"/>
        <result column="manufacturer" jdbcType="VARCHAR" property="manufacturer"/>
        <result column="other_attribute" jdbcType="VARCHAR" property="otherAttribute"/>
    </resultMap>
    <insert id="insert" parameterType="com.linayi.entity.goods.GoodsSku" useGeneratedKeys="true" keyProperty="goodsSkuId">
    insert into goods_sku (goods_sku_id, name, full_name, barcode,
      category_id, brand_id, status, 
      image, update_time, create_time, 
      model, function, produce_address, 
      produce_date, valid_date, manufacturer, 
      other_attribute,user_id,sold_num)
    values (#{goodsSkuId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{fullName,jdbcType=VARCHAR}, #{barcode,jdbcType=VARCHAR},
      #{categoryId,jdbcType=INTEGER}, #{brandId,jdbcType=INTEGER}, #{status,jdbcType=VARCHAR}, 
      #{image,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, 
      #{model,jdbcType=VARCHAR}, #{function,jdbcType=VARCHAR}, #{produceAddress,jdbcType=VARCHAR}, 
      #{produceDate,jdbcType=TIMESTAMP}, #{validDate,jdbcType=TIMESTAMP}, #{manufacturer,jdbcType=VARCHAR}, 
      #{otherAttribute,jdbcType=VARCHAR},#{userId,jdbcType=INTEGER},#{soldNum,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.linayi.entity.goods.GoodsSku">
        insert into goods_sku
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="goodsSkuId != null">
                goods_sku_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="fullName != null">
                full_name,
            </if>
            <if test="barcode != null">
                barcode,
            </if>
            <if test="categoryId != null">
                category_id,
            </if>
            <if test="brandId != null">
                brand_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="image != null">
                image,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="model != null">
                model,
            </if>
            <if test="function != null">
                function,
            </if>
            <if test="produceAddress != null">
                produce_address,
            </if>
            <if test="produceDate != null">
                produce_date,
            </if>
            <if test="validDate != null">
                valid_date,
            </if>
            <if test="manufacturer != null">
                manufacturer,
            </if>
            <if test="otherAttribute != null">
                other_attribute,
            </if>
            <if test="soldNum != null">
                sold_num,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="goodsId != null">
                #{goodsSkuId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="fullName != null">
                #{fullName,jdbcType=VARCHAR},
            </if>
            <if test="barcode != null">
                #{barcode,jdbcType=VARCHAR},
            </if>
            <if test="categoryId != null">
                #{categoryId,jdbcType=INTEGER},
            </if>
            <if test="brandId != null">
                #{brandId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="image != null">
                #{image,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="model != null">
                #{model,jdbcType=VARCHAR},
            </if>
            <if test="function != null">
                #{function,jdbcType=VARCHAR},
            </if>
            <if test="produceAddress != null">
                #{produceAddress,jdbcType=VARCHAR},
            </if>
            <if test="produceDate != null">
                #{produceDate,jdbcType=TIMESTAMP},
            </if>
            <if test="validDate != null">
                #{validDate,jdbcType=TIMESTAMP},
            </if>
            <if test="manufacturer != null">
                #{manufacturer,jdbcType=VARCHAR},
            </if>
            <if test="otherAttribute != null">
                #{otherAttribute,jdbcType=VARCHAR},
            </if>
            <if test="soldNum != null">
                #{soldNum,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <sql id="columnList">
     goods_sku_id, NAME, full_name,barcode, category_id, brand_id, STATUS, image, update_time, create_time, model, FUNCTION, produce_address, produce_date, valid_date, manufacturer, other_attribute,sold_num
  </sql>

    <update id="updateGoodsFullName" parameterType="com.linayi.entity.goods.GoodsSku">
        update goods_sku
        <set>
            <if test="fullName != null">
                full_name = #{fullName}
            </if>
        </set>
        where goods_sku_id = #{goodsSkuId}
    </update>
    <update id="update" parameterType="com.linayi.entity.goods.GoodsSku">
        update goods_sku
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="fullName != null">
                full_name = #{fullName},
            </if>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="barcode != null">
                barcode = #{barcode},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId},
            </if>
            <if test="brandId != null">
                brand_id = #{brandId},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="image != null">
                image = #{image},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="model != null">
                model = #{model},
            </if>
            <if test="function != null">
                function = #{function},
            </if>
            <if test="produceAddress != null">
                produce_address = #{produceAddress},
            </if>
            <if test="produceDate != null">
                produce_date = #{produceDate},
            </if>
            <if test="validDate != null">
                valid_date = #{validDate},
            </if>
            <if test="manufacturer != null">
                manufacturer = #{manufacturer},
            </if>
            <if test="otherAttribute != null">
                other_attribute = #{otherAttribute},
            </if>
            <if test="soldNum != null">
                sold_num = #{soldNum},
            </if>
            <if test="isRecommend != null">
                is_recommend = #{isRecommend},
            </if>
        </set>
        where goods_sku_id = #{goodsSkuId}
    </update>
    <select id="getGoodsNameList" resultType="java.lang.String">
        select name from goods_sku
    </select>
    <select id="getGoodsLists" resultType="com.linayi.entity.goods.GoodsSku">
        select gs.goods_sku_id goodsSkuId, gs.name NAME, gs.full_name fullName,gs.barcode barcode, gs.category_id categoryId,c.name categoryName, gs.brand_id brandId,b.name brandName, gs.status STATUS, gs.image image, gs.update_time updateTime, gs.create_time createTime, gs.model model, gs.function FUNCTION , gs.produce_address produceAddress, gs.produce_date produceDate, gs.valid_date validDate, gs.manufacturer manufacturer, gs.other_attribute otherAttribute
        ,e.real_name createName,aa.user_name userName,gs.is_recommend from goods_sku gs left join admin_account aa on aa.account_id = gs.user_id left join employee e on aa.user_id = e.employee_id left join brand b on b.brand_id = gs.brand_id left join category c on c.category_id = gs.category_id
        <where>
            <if test="goodsSkuId != null and goodsSkuId != ''">
                gs.goods_sku_id like #{goodsSkuId}
            </if>
            <if test="name != null and name != ''">
                and gs.name like #{name}
            </if>
            <if test="fullName != null and fullName != ''">
                and gs.full_name like concat('%',#{fullName},'%')
            </if>
            <if test="barcode != null and barcode != ''">
                and gs.barcode like concat('%',#{barcode},'%')
            </if>
            <if test="categoryId != null and categoryId != ''">
                and gs.category_id = #{categoryId}
            </if>
            <if test="isRecommend != null and isRecommend != ''">
                and gs.is_recommend = #{isRecommend}
            </if>
            <if test="brandId != null and brandId != ''">
                and gs.brand_id = #{brandId}
            </if>
            <if test="status != null and status != ''">
                and gs.status = #{status}
            </if>

            <if test="image != null and image != ''">
                and gs.image = #{image}
            </if>
            <if test="updateTime != null and updateTime != ''">
                and gs.update_time = #{updateTime}
            </if>
            <if test="createName != null and createName != ''">
                and e.real_name like concat('%',#{createName},'%')
            </if>

            <if test="userName != null and userName != ''">
                and aa.user_name like concat('%',#{userName},'%')
            </if>
            <if test="createTimeStart != null and createTimeStart != ''">
                and gs.create_time <![CDATA[ >= ]]> #{createTimeStart}
            </if>
            <if test="createTimeEnd != null and createTimeEnd != ''">
                and gs.create_time <![CDATA[ <= ]]> #{createTimeEnd}
            </if>

        </where>
        order by gs.goods_sku_id desc
    </select>
    <select id="getGoodsByGoods" resultMap="BaseResultMap">
        select
        <include refid="columnList"/>
        from goods_sku
        <where>
            <if test="goodsSkuId != null and goodsSkuId != ''">
                goods_sku_id = #{goodsSkuId}
            </if>
            <if test="name != null and name != ''">
                and name like #{name}
            </if>
            <if test="fullName != null and fullName != ''">
                and full_name like #{fullName}
            </if>
            <if test="barcode != null and barcode != ''">
                and barcode = #{barcode}
            </if>
            <if test="categoryId != null and categoryId != ''">
                and category_id = #{categoryId}
            </if>

            <if test="brandId != null and brandId != ''">
                and brand_id = #{brandId}
            </if>
            <if test="status != null and status != ''">
                and status = #{status}
            </if>
            <if test="image != null and image != ''">
                and image = #{image}
            </if>
            <if test="updateTime != null and updateTime != ''">
                and update_time = #{updateTime}
            </if>
            <if test="createTimeStart != null and createTimeStart != ''">
                and create_time <![CDATA[ >= ]]> #{createTimeStart}
            </if>
            <if test="createTimeEnd != null and createTimeEnd != ''">
                and create_time <![CDATA[ <= ]]> #{createTimeEnd}
            </if>
        </where>
    </select>
    <select id="getGoodsList" parameterType="com.linayi.entity.goods.GoodsSku" resultType="com.linayi.entity.goods.GoodsSku">
        select gs.goods_sku_id goodsSkuId, gs.name NAME, gs.full_name fullName,gs.barcode barcode, gs.category_id categoryId, gs.brand_id brandId, gs.status STATUS, gs.image image, gs.update_time updateTime, gs.create_time createTime, gs.model model, gs.function FUNCTION , gs.produce_address produceAddress, gs.produce_date produceDate, gs.valid_date validDate, gs.manufacturer manufacturer, gs.other_attribute otherAttribute
        ,e.real_name createName,aa.user_name userName from goods_sku gs left join admin_account aa on aa.account_id = gs.user_id left join employee e on aa.user_id = e.employee_id
        <where>
            <if test="goodsSkuId != null and goodsSkuId != ''">
                gs.goods_sku_id like #{goodsSkuId}
            </if>
            <if test="name != null and name != ''">
                and gs.name like #{name}
            </if>
            <if test="fullName != null and fullName != ''">
                and gs.full_name like concat('%',#{fullName},'%')
            </if>
            <if test="barcode != null and barcode != ''">
                and gs.barcode like concat('%',#{barcode},'%')
            </if>
            <if test="categoryId != null and categoryId != ''">
                and gs.category_id = #{categoryId}
            </if>

            <if test="brandId != null and brandId != ''">
                and gs.brand_id = #{brandId}
            </if>
            <if test="status != null and status != ''">
                and gs.status = #{status}
            </if>

            <if test="image != null and image != ''">
                and gs.image = #{image}
            </if>
            <if test="updateTime != null and updateTime != ''">
                and gs.update_time = #{updateTime}
            </if>
            <if test="createName != null and createName != ''">
                and e.real_name like concat('%',#{createName},'%')
            </if>

            <if test="userName != null and userName != ''">
                and aa.user_name like concat('%',#{userName},'%')
            </if>
            <if test="createTimeStart != null and createTimeStart != ''">
                and gs.create_time <![CDATA[ >= ]]> #{createTimeStart}
            </if>
            <if test="createTimeEnd != null and createTimeEnd != ''">
                and gs.create_time <![CDATA[ <= ]]> #{createTimeEnd}
            </if>
            <if test="goodsSkuIdList != null and goodsSkuIdList.size() > 0">
                AND gs.goods_sku_id in
                <foreach collection="goodsSkuIdList" index="index" item="item1" open="(" separator="," close=")">
                    ${item1}
                </foreach>
            </if>
        </where>
        order by gs.goods_sku_id desc
    </select>

    <!-- 通过品牌id分类id商品名获取商品列表 -->
    <!-- List<GoodsSku>getGoodsListBybrandIdcategoryIdGoodsName() -->
    <select id="getGoodsListBybrandIdcategoryIdGoodsName" resultType="com.linayi.entity.goods.GoodsSku" >
        SELECT
            gs.goods_sku_id  goodsSkuId,
            gs.full_name fullName,
            gs.category_id categoryId,
            gs.brand_id brandId,
            gs.image,
            gs.create_time  createTime,
            <if test="memberLevel!=null and memberLevel=='NORMAL'">
                cg.min_price_normal minPrice,
                round(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='NOT_MEMBER'">
                cg.min_price_normal minPrice,
                round(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                cg.min_price_senior minPrice,
                round(((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                cg.min_price_super minPrice,
                round(((cg.max_price_super-cg.min_price_super)/cg.min_price_super*100),2) spreadRate,
            </if>
            REPLACE(GROUP_CONCAT(distinct av.value),',','/') attrValues
        FROM
        goods_sku gs JOIN community_goods cg ON gs.goods_sku_id=cg.goods_sku_id
        JOIN supermarket ss ON cg.min_supermarket_id=ss.supermarket_id
        LEFT JOIN goods_attr_value gav ON gav.goods_sku_id=gs.goods_sku_id
        LEFT JOIN attribute_value av ON av.value_id=gav.attr_value_id
        <where>
            cg.community_id=#{communityId}
            <if test="categoryId!=null">
                and gs.category_id=#{categoryId}
            </if>
            <if test="brandId!=null">
                and gs.brand_id=#{brandId}
            </if>
            <if test="fullName!=null and fullName!=''">
                and gs.full_name like concat('%',#{fullName},'%')
            </if>
            <if test="memberLevel=='NORMAL' or  memberLevel=='NOT_MEMBER'">
                and cg.min_price_normal IS NOT NULL
                GROUP BY gs.goods_sku_id
              <choose>
                <when test="orderBy!=null and orderBy=='minPriceOrder'">
                    ORDER BY cg.min_price_normal asc
                </when>
                <when test="orderBy!=null and orderBy=='maxPriceOrder'">
                    ORDER BY cg.min_price_normal desc
                </when>
                <when test="orderBy!=null and orderBy=='spreadRateOrder'">
                    ORDER BY ((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal) DESC
                </when>
              </choose>
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                and cg.min_price_senior IS NOT NULL
                GROUP BY gs.goods_sku_id
                <choose>
                <when test="orderBy!=null and orderBy=='minPriceOrder'">
                    ORDER BY cg.min_price_senior asc
                </when>
                <when test="orderBy!=null and orderBy=='maxPriceOrder'">
                    ORDER BY cg.min_price_senior desc
                </when>
                <when test="orderBy!=null and orderBy=='spreadRateOrder'">
                    ORDER BY ((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior) DESC
                </when>
                </choose>
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                and cg.min_price_super IS NOT NULL
                GROUP BY gs.goods_sku_id
                <choose>
                    <when test="orderBy!=null and orderBy=='minPriceOrder'">
                        ORDER BY cg.min_price_super asc
                    </when>
                    <when test="orderBy!=null and orderBy=='maxPriceOrder'">
                        ORDER BY cg.min_price_super desc
                    </when>
                    <when test="orderBy!=null and orderBy=='spreadRateOrder'">
                        ORDER BY ((cg.max_price_super-cg.min_price_super)/cg.min_price_super) DESC
                    </when>
                </choose>
            </if>
        </where>
    </select>
    <select id="getGoodsById" resultMap="BaseResultMap">
        select  <include refid="columnList"/> from goods_sku where goods_sku_id = #{goodsSkuId}
    </select>


   <!-- &lt;!&ndash; 价差排行 &ndash;&gt;
    &lt;!&ndash;List<GoodsSku> getDifferenceRanking()&ndash;&gt;
    <select id="getDifferenceRanking" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
            gs.goods_sku_id  goodsSkuId,
            gs.full_name fullName,
            gs.category_id categoryId,
            gs.brand_id brandId,
            gs.image,
            gs.create_time  createTime,
        <if test="memberLevel=='NORMAL' or memberLevel=='NOT_MEMBER'">
            cg.min_price_normal minPrice,
            truncate(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
        </if>
        <if test="memberLevel!=null and memberLevel=='SENIOR'">
            cg.min_price_senior minPrice,
            truncate(((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior*100),2) spreadRate,
        </if>
        <if test="memberLevel!=null and memberLevel=='SUPER'">
            cg.min_price_super minPrice,
            truncate(((cg.max_price_super-cg.min_price_super)/cg.min_price_super*100),2) spreadRate,
        </if>
            REPLACE(GROUP_CONCAT(av.value),',','/') attrValues
       FROM
            goods_sku gs
            LEFT JOIN  community_goods cg ON gs.goods_sku_id=cg.goods_sku_id
            LEFT JOIN  brand b ON b.brand_id=gs.brand_id
            LEFT JOIN goods_attr_value gav ON gav.goods_sku_id=gs.goods_sku_id
            LEFT JOIN attribute_value av ON av.value_id=gav.attr_value_id
        <where>
            <if test="communityId!=null and communityId!=''">
                AND	cg.community_id=#{communityId}
            </if>
            <if test="categoryId!=null and categoryId!=''">
                AND gs.category_id=#{categoryId}
            </if>
            <if test="brandName!=null and brandName!=''">
                AND b.name=#{brandName}
            </if>
            <if test="memberLevel=='NORMAL' or  memberLevel=='NOT_MEMBER'">
                and cg.min_price_normal IS NOT NULL
                and ((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal) &gt; 0.6
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal) DESC
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                and cg.min_price_senior IS NOT NULL
                and ((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior) &gt; 0.6
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior) DESC
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                and cg.min_price_super IS NOT NULL
                and ((cg.max_price_super-cg.min_price_super)/cg.min_price_super) &gt; 0.6
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_super-cg.min_price_super)/cg.min_price_super) DESC
            </if>
        </where>
    </select>-->



    <!-- 根据商品名称模糊查询商品列表 -->
    <!--List<GoodsSku> getGoodsSkuByVagueGoodsName(GoodsSku goodsSku) -->
    <select id="getGoodsSkuByVagueGoodsName" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
            goods_sku_id,
            NAME name,
            full_name,
            barcode,
            category_id,
            brand_id,
            image,
            update_time,
            create_time
        FROM
           goods_sku
        <where>
            <if test="brandId!=null">
                and brand_id=#{brandId}
            </if>
            <if test="fullName!=null and fullName!=''">
                and full_name like concat('%',#{fullName},'%')
            </if>
            <if test="valueName!=null and valueName!=''">
                and full_name like concat('%',#{valueName},'%')
            </if>
            <if test="barcode!=null and barcode!=''">
                and barcode like concat('%',#{barcode},'%')
            </if>
            <if test="status!=null and status!=''">
                and status=#{status}
            </if>
        </where>

    </select>

    <!-- 自定义下单 -->
    <select id="customSearch" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
        gs.goods_sku_id,
        gs.name,
        gs.full_name ,
        gs.barcode,
        gs.category_id,
        gs.brand_id,
        gs.status,
        gs.image,
        gs.update_time,
        gs.create_time,
        gs.model,
        gs.function,
        gs.produce_address,
        gs.produce_date,
        gs.valid_date,
        gs.manufacturer,
        gs.other_attribute,
        cg.min_price minPrice,
        cg.max_price maxPrice,
        (cg.max_price-cg.min_price)/cg.min_price spreadRate,
        ss.name minSupermarket,
        cg.min_supermarket_id_normal,cg.min_price_normal,cg.max_supermarket_id_normal,cg.max_price_normal,cg.min_supermarket_id_senior,cg.min_price_senior,
        cg.max_supermarket_id_senior,cg.max_price_senior,cg.min_supermarket_id_super,cg.min_price_super,cg.max_supermarket_id_super,cg.max_price_super
        FROM
        goods_sku gs,community_goods cg,supermarket ss,brand b
        <where>
            gs.goods_sku_id=cg.goods_sku_id
            AND
            cg.min_supermarket_id=ss.supermarket_id
            AND
            gs.brand_id = b.brand_id
            <if test="communityId!=null">
                and cg.community_id=#{communityId}
            </if>
            <if test="brandName!=null and brandName!=''">
                and b.name like concat('%',#{brandName},'%')
            </if>
            <if test="fullName!=null and fullName!=''">
                and gs.full_name like concat('%',#{fullName},'%')
            </if>
            <if test="valueName!=null and valueName!=''">
                and gs.full_name like concat('%',#{valueName},'%')
            </if>
            <if test="memberLevel!=null and memberLevel=='NORMAL'">
                and cg.min_price_normal IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='NOT_MEMBER'">
                and cg.min_price_normal IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                and cg.min_price_senior IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                and cg.min_price_super IS NOT NULL
            </if>
        </where>
    </select>


    <select id="getGoodsByName" resultMap="BaseResultMap">
        select <include refid="columnList"/> from goods_sku where name like concat('%',#{name},'%')
    </select>

    <select id="deleteGoodsById">
      delete from goods_sku where goods_sku_id = #{goodsSkuId}
  </select>


    <!-- 获取所有商品id -->
    <select id="getGoodsSkuIdBygoodsSku" resultType="java.lang.Integer">
  	SELECT
  		goods_sku_id
  	FROM
  		goods_sku	 
 
  </select>

    <select id="selectNamebyId" resultType="com.linayi.entity.goods.GoodsSku">
      select name,image from goods_sku where goods_sku_id=#{goodsSkuId}
  </select>

    <!--首页推荐商品-->
    <select id="getRecommendGoodsSku" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
            gs.goods_sku_id  goodsSkuId,
            gs.full_name fullName,
            gs.category_id categoryId,
            gs.brand_id brandId,
            gs.image,
            gs.create_time  createTime,
            <if test="memberLevel!=null and memberLevel=='NORMAL'">
                cg.min_price_normal minPrice,
                round(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='NOT_MEMBER'">
                cg.min_price_normal minPrice,
                round(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                cg.min_price_senior minPrice,
                round(((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior*100),2) spreadRate,
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                cg.min_price_super minPrice,
                round(((cg.max_price_super-cg.min_price_super)/cg.min_price_super*100),2) spreadRate,
            </if>
            REPLACE(GROUP_CONCAT(distinct av.value),',','/') attrValues
        FROM
            goods_sku gs  LEFT JOIN community_goods cg ON gs.goods_sku_id=cg.goods_sku_id
            LEFT JOIN goods_attr_value gav ON gav.goods_sku_id=gs.goods_sku_id
            LEFT JOIN attribute_value av ON av.value_id=gav.attr_value_id
        where
            cg.community_id=#{communityId}
        AND
            gs.is_recommend ='TRUE' AND gs.status='NORMAL'
            <if test="memberLevel!=null and memberLevel=='NORMAL'">
                and cg.min_price_normal IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='NOT_MEMBER'">
                and cg.min_price_normal IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                and cg.min_price_senior IS NOT NULL
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                and cg.min_price_super IS NOT NULL
            </if>
            group by gs.goods_sku_id
            order by gs.goods_sku_id desc

    </select>

    <select id="getSoldNumByGoodsSkuId" parameterType="java.lang.Long" resultType="java.lang.Integer">
        select sold_num from goods_sku where goods_sku_id = #{goodsSkuId}
    </select>
    <select id="getGoodsSkuByBarcode" parameterType="java.lang.String" resultType="com.linayi.entity.goods.GoodsSku">
        select  <include refid="columnList"/> from goods_sku where barcode = #{barcode}
    </select>

    <!-- 特价排行 -->
    <!--List<GoodsSku> getSpecialPrice()-->
    <select id="getSpecialPrice" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
        gs.goods_sku_id  goodsSkuId,
        gs.full_name fullName,
        gs.category_id categoryId,
        gs.brand_id brandId,
        gs.image,
        gs.create_time  createTime,
        <if test="memberLevel=='NORMAL' or memberLevel=='NOT_MEMBER'">
            cg.min_price_normal minPrice,
            round(((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal*100),2) spreadRate,
        </if>
        <if test="memberLevel!=null and memberLevel=='SENIOR'">
            cg.min_price_senior minPrice,
            round(((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior*100),2) spreadRate,
        </if>
        <if test="memberLevel!=null and memberLevel=='SUPER'">
            cg.min_price_super minPrice,
            round(((cg.max_price_super-cg.min_price_super)/cg.min_price_super*100),2) spreadRate,
        </if>
        REPLACE(GROUP_CONCAT(distinct av.value),',','/') attrValues
        FROM
        goods_sku gs
        LEFT JOIN  community_goods cg ON gs.goods_sku_id=cg.goods_sku_id
        LEFT JOIN correct c ON c.goods_sku_id = gs.goods_sku_id
        LEFT JOIN  brand b ON b.brand_id=gs.brand_id
        LEFT JOIN goods_attr_value gav ON gav.goods_sku_id=gs.goods_sku_id
        LEFT JOIN attribute_value av ON av.value_id=gav.attr_value_id
        <where>
            gs.status='NORMAL'
            <if test="communityId !=null and communityId !=''">
             AND  cg.community_id = #{communityId}
            </if>
            AND  c.price_type = "PROMOTION"
            AND  c.STATUS = "AFFECTED"
            <if test="categoryId!=null and categoryId!=''">
                AND gs.category_id=#{categoryId}
            </if>
            <if test="brandName!=null and brandName!=''">
                AND b.name=#{brandName}
            </if>
            <if test="memberLevel=='NORMAL' or  memberLevel=='NOT_MEMBER'">
                and cg.min_price_normal IS NOT NULL
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_normal-cg.min_price_normal)/cg.min_price_normal) DESC
            </if>
            <if test="memberLevel!=null and memberLevel=='SENIOR'">
                and cg.min_price_senior IS NOT NULL
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_senior-cg.min_price_senior)/cg.min_price_senior) DESC
            </if>
            <if test="memberLevel!=null and memberLevel=='SUPER'">
                and cg.min_price_super IS NOT NULL
                GROUP BY gs.goods_sku_id
                ORDER BY ((cg.max_price_super-cg.min_price_super)/cg.min_price_super) DESC
            </if>
        </where>
    </select>

    <!--获取社区绑定的超市促销商品集合-->
<!--    <select id="getGoodsSukIdByCommunityId" resultType="java.lang.Long" >
        SELECT DISTINCT
              cc.goods_sku_id
         FROM
              community_supermarket css
         JOIN correct cc ON css.supermarket_id = cc.supermarket_id
         WHERE
              css.community_id = #{communityId}
         AND  cc.price_type = "PROMOTION"
         AND  cc. STATUS = "AFFECTED"
    </select>-->


    <!-- 后台价差排行 -->
    <!--List<GoodsSku> getBackstageDifferenceRanking()-->
    <select id="getBackstageDifferenceRanking" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
            gs.goods_sku_id  goodsSkuId,
            gs.full_name fullName,
            gs.category_id categoryId,
            gs.brand_id brandId,
            max(sg.price) maxPrice,
            min(sg.price) minPrice,
         /* GROUP_CONCAT(sg.price),
            GROUP_CONCAT(sg.supermaeket_id),*/
            round(((max(sg.price)- min(sg.price))/min(sg.price)*100),2) spreadRate
        FROM
            supermarket_goods sg join goods_sku gs on sg.goods_sku_id = gs.goods_sku_id
        WHERE
              gs.status='NORMAL'
             <if test="goodsSkuId !=null and goodsSkuId != ''">
                and gs.goods_sku_id=#{goodsSkuId}
             </if>
             <if test="name!=null and name!=''">
                and  gs.full_name like  concat('%',#{name},'%')
             </if>
        GROUP BY gs.goods_sku_id
        HAVING
                1=1
                <if test="spreadRate!=null and spreadRate!=''">
                    and spreadRate &gt; #{spreadRate}
                </if>
        ORDER BY spreadRate desc
    </select>


        <!-- 根据超市id获取无价格的商品列表 -->
        <!--List<GoodsSku> getGoodsSkuNotPrice(GoodsSku goodsSku) -->
        <select id="getGoodsSkuNotPrice" resultType="com.linayi.entity.goods.GoodsSku">
                SELECT
                    gs.goods_sku_id,
                    gs.NAME name,
                    gs.full_name,
                    gs.barcode,
                    gs.category_id,
                    gs.brand_id,
                    gs.image,
                    gs.update_time,
                    gs.create_time
                 FROM
                    goods_sku gs LEFT JOIN supermarket_goods sg ON gs.goods_sku_id=sg.goods_sku_id
                    AND sg.supermarket_id=#{supermarketId} LEFT JOIN supermarket_goods_record sgr
                    ON sgr.goods_sku_id=gs.goods_sku_id AND sgr.supermarket_id=#{supermarketId}
            <where>
                      gs.STATUS='NORMAL'
                AND   sg.goods_sku_id is null
                AND   (sgr.goods_sku_id is null AND sgr.supermarket_id is null)
                <if test="brandId!=null">
                    and brand_id=#{brandId}
                </if>
                <if test="fullName!=null and fullName!=''">
                    and full_name like concat('%',#{fullName},'%')
                </if>
                <if test="valueName!=null and valueName!=''">
                    and full_name like concat('%',#{valueName},'%')
                </if>
                <if test="barcode!=null and barcode!=''">
                    and barcode like concat('%',#{barcode},'%')
                </if>
                <if test="status!=null and status!=''">
                    and status=#{status}
                </if>
            </where>
        </select>

    <select id="selectBySupermerketIdAndGoodsSkuIdList" resultType="com.linayi.entity.goods.GoodsSku">
        SELECT
          gs.full_name,gs.goods_sku_id,gs.image
        FROM
          goods_sku gs
        LEFT JOIN supermarket_goods sg ON sg.goods_sku_id = gs.goods_sku_id AND sg.supermarket_id = #{goodsSku.supermarketId}
        <where>
          sg.goods_sku_id IS NULL
        AND
            gs.STATUS='NORMAL'
        <if test="goodsSkuIdList != null and goodsSkuIdList.size() > 0">
            and gs.goods_sku_id in
            <foreach item="goodsSkuId" index="index" collection="goodsSkuIdList"
                     open="(" separator="," close=")">
                #{goodsSkuId}
            </foreach>
        </if>
        </where>
    </select>


</mapper>
